apiVersion: v1
kind: ServiceAccount
metadata:
  name: cert-manager
  namespace: kube-system
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
    name: cert-manager
    namespace: kube-system  
rules:
- apiGroups:
  - ""
  - "extensions"
  resources:
  - configmaps
  - secrets
  - services
  - endpoints
  - ingresses
  - nodes
  - pods
  verbs:
  - list
  - get
  - watch
- apiGroups:
  - "extensions"
  - ""
  resources:
  - ingresses
  - ingresses/status
  - secrets
  verbs:
  - get
  - update
  - create
  - list
  - patch
  - delete
  - watch
- apiGroups:
  - "*"
  - ""
  resources:
  - events
  - certificates
  - secrets
  verbs:
  - create
  - list
  - update
  - get
  - patch
  - watch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: cert-manager
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    namespace: kube-system
    name: cert-manager
roleRef:
  kind: ClusterRole
  name: cert-manager
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: extensions/v1beta1
kind: ThirdPartyResource
description: "A specification of a Let's Encrypt Certificate to manage."
metadata:
  name: "certificate.stable.k8s.psg.io"
versions:
  - name: v1
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    k8s-app: kubernetes-cert-manager
    kubernetes.io/cluster-service: "true"
    kubernetes.io/name: "Kubernetes-Cert-Manager"
    addonmanager.kubernetes.io/mode: Reconcile
  name: kubernetes-cert-manager
  namespace: kube-system
spec:
  replicas: 1
  template:
    metadata:
      labels:
        k8s-app: kubernetes-cert-manager
      name: kubernetes-cert-manager
    spec:
      serviceAccountName: cert-manager
      containers:
        - name: kubernetes-cert-manager
          image: rosskukulinski/kube-cert-manager:0.5.0
          args:
            - "-data-dir=/var/lib/cert-manager"
            #- "-acme-url=https://acme-staging.api.letsencrypt.org/directory"
            # NOTE: the URL above points to the staging server, where you won't get real certs.
            # Uncomment the line below to use the production LetsEncrypt server:
            - "-acme-url=https://acme-v01.api.letsencrypt.org/directory"
            # You can run multiple instances of kube-cert-manager for the same namespace(s), 
            # each watching for a different value for the 'class' label
            #- "-class=default"
            # You can choose to monitor only some namespaces, otherwise all namespaces will be monitored
            #- "-namespaces=default,test"
            # If you set a default email, you can omit the field/annotation from Certificates/Ingresses
            - "-default-email=zhaw.srueg@mailhero.io"
            # If you set a default provider, you can omit the field/annotation from Certificates/Ingresses
            - "-default-provider=dnsimple"
          env:
            - name: DNSIMPLE_EMAIL
              valueFrom:
                secretKeyRef:
                  name: dnsimple-credentials
                  key: email
            - name: DNSIMPLE_API_KEY
              valueFrom:
                secretKeyRef:
                  name: dnsimple-credentials
                  key: api_token
          volumeMounts:
            - name: data
              mountPath: /var/lib/cert-manager
        - name: kubectl-proxy
          image: palmstonegames/kubectl-proxy:1.4.0
      volumes:
        - name: "data"
          emptyDir: {}