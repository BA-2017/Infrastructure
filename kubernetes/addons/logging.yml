apiVersion: v1
kind: ServiceAccount
metadata:
  name: fluentd-logging
  namespace: kube-system
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
    name: fluentd-logging
    namespace: kube-system  
rules:
- apiGroups:
  - ""
  - "extensions"
  resources:
  - nodes
  - pods
  - pods/log
  verbs:
  - list
  - get
  - watch
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: fluentd-logging
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    namespace: kube-system
    name: fluentd-logging
roleRef:
  kind: ClusterRole
  name: fluentd-logging
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: fluentd-logging
  namespace: kube-system
  labels:
    k8s-app: fluentd-logging
    version: v1
    kubernetes.io/cluster-service: "true"
spec:
  template:
    metadata:
      labels:
        k8s-app: fluentd-logging
        version: v1
        kubernetes.io/cluster-service: "true"
    spec:
      containers:
      - name: fluentd
        image: quay.io/fluent/fluentd-kubernetes-daemonset
        env:
          - name:  FLUENT_ELASTICSEARCH_HOST
            value: "elasticsearch-logging"
          - name:  FLUENT_ELASTICSEARCH_PORT
            value: "9200"
        resources:
          limits:
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 200Mi
        volumeMounts:
        - name: varlog
          mountPath: /var/log
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
      terminationGracePeriodSeconds: 30
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
      serviceAccountName: fluentd-logging
      volumes:
      - name: varlog
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: elasticsearch-logging
  namespace: kube-system
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  nfs:
    path: /kubernetes/elasticsearch
    server: 172.21.21.201
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: elasticsearch-logging
  namespace: kube-system
spec:
  resources:
    requests:
      storage: 10Gi
  accessModes:
    - ReadWriteOnce
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: elasticsearch-logging
  namespace: kube-system
  labels:
    k8s-app: elasticsearch-logging
    kubernetes.io/cluster-service: "true"
spec:
  template:
    metadata:
      labels:
        k8s-app: elasticsearch-logging
        kubernetes.io/cluster-service: "true"
    spec:
      containers:
      - name: elasticsearch-logging
        image: docker.elastic.co/elasticsearch/elasticsearch:5.3.1
        resources:
          requests:
            cpu: "25m"
            memory: "2Gi"
          limits:
            cpu: "100m"
            memory: "2Gi"
        env:
          - name: "http_host"
            value: "0.0.0.0"
          - name: "ES_JAVA_OPTS"
            value: "-Xms512m -Xmx512m"
          - name: "bootstrap_memory_lock"
            value: "true"
        securityContext:
          privileged: false
          capabilities:
            add:
              - IPC_LOCK
              - SYS_RESOURCE
        ports:
        - containerPort: 9200
          name: elasticsearch
          protocol: TCP
        #readinessProbe:
        #  httpGet:
        #    path: /_cluster/health
        #    port: 9200
        #    scheme: HTTP
        #livenessProbe:
        #  httpGet:
        #    path: /_cluster/health
        #    port: 9200
        #    scheme: HTTP
        #  initialDelaySeconds: 30
      volumes:
      - name: elasticsearch-data
        persistentVolumeClaim:
          claimName: elasticsearch-logging
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-logging
  namespace: kube-system
  labels:
    k8s-app: elasticsearch-logging
    kubernetes.io/cluster-service: "true"
spec:
  selector:
    k8s-app: elasticsearch-logging
  ports:
  - port: 9200
    targetPort: elasticsearch
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kibana-logging
  namespace: kube-system
  labels:
    k8s-app: kibana-logging
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: kibana-logging
  template:
    metadata:
      labels:
        k8s-app: kibana-logging
    spec:
      containers:
      - name: kibana-logging
        image: kibana:5.3
        resources:
          # keep request = limit to keep this container in guaranteed class
          limits:
            cpu: 100m
          requests:
            cpu: 100m
        env:
          - name: "ELASTICSEARCH_URL"
            value: "http://elasticsearch-logging:9200"
        ports:
        - containerPort: 5601
          name: ui
          protocol: TCP
        #readinessProbe:
        #  httpGet:
        #    path: /api/status
        #    port: 5601
        #    scheme: HTTP
        #livenessProbe:
        #  httpGet:
        #    path: /api/status
        #    port: 5601
        #    scheme: HTTP
        #  initialDelaySeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: kibana-logging
  namespace: kube-system
  labels:
    k8s-app: kibana-logging
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/name: "Kibana"
spec:
  ports:
  - port: 5601
    protocol: TCP
    targetPort: ui
  selector:
    k8s-app: kibana-logging
---
kind: Ingress
apiVersion: extensions/v1beta1
metadata:
  name: registry
  namespace: kube-system
  labels:
    # let kube-cert-manager generate an SSL certificate
    stable.k8s.psg.io/kcm.class: "default"
  annotations:
    # type of authentication
    ingress.kubernetes.io/auth-type: basic
    # name of the secret that contains the user/password definitions
    ingress.kubernetes.io/auth-secret: dashboard-auth
    # message to display with an appropiate context why the authentication is required
    ingress.kubernetes.io/auth-realm: "Authentication Required - Kibana"
spec:
  tls:
  - hosts:
    - kibana.zhaw.tk
    secretName: kibana-tls-cert
  rules:
  - host: kibana.zhaw.tk
    http:
      paths:
      - path: /
        backend:
          serviceName: kibana-logging
          servicePort: 5601